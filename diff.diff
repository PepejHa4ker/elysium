diff --git a/Cargo.toml b/Cargo.toml
index b4ac373..81a982a 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -6,59 +6,27 @@ edition = "2021"
 [workspace]
 members = ["crates/*"]
 
-[dependencies.atomic_float]
-path = "crates/atomic_float"
-
-[dependencies.ctor]
-version = "0.1"
-
-[dependencies.daisy_chain]
-git = "https://gitdab.com/undefined/daisy_chain"
-
-[dependencies.findshlibs]
-version = "0.10"
-
-[dependencies.libc]
-version = "0.2"
-
-[dependencies.libloading]
-version = "0.7"
-
-[dependencies.parking_lot]
-version = "0.11"
-
-[dependencies.rand]
-version = "0.8"
-
-[dependencies.regex]
-version = "1.5"
-
-[dependencies.spirit]
-git = "https://gitdab.com/undefined/spirit"
-
-[dependencies.tracing]
-version = "0.1"
-
-[dependencies.tracing-appender]
-version = "0.1"
-
-[dependencies.tracing-subscriber]
-version = "0.2"
-
-[dependencies.vek]
-features = ["repr_simd"]
-version = "0.15"
-
-[dependencies.sdk]
-path = "crates/sdk"
-
-[dependencies.vptr]
-path = "crates/vptr"
+[dependencies]
+atomic_float = { path = "crates/atomic_float" }
+ctor = "0.1"
+daisy_chain = { git = "https://gitdab.com/undefined/daisy_chain.git" }
+findshlibs = "0.10"
+libc = "0.2"
+libloading = "0.7"
+parking_lot = "0.11"
+rand = "0.8"
+regex = "1.5"
+sdk = { path = "crates/sdk" }
+spirit = { git = "https://gitdab.com/undefined/spirit.git" }
+vek = { features = ["repr_simd"], version = "0.15" }
+virt = { path = "crates/virt" }
+vptr = { path = "crates/vptr" }
 
 [lib]
 crate-type = ["cdylib"]
 path = "src/lib.rs"
 
 [profile.release]
+codegen-units = 1
 lto = "thin"
 panic = "abort"
diff --git a/crates/sdk/src/lib.rs b/crates/sdk/src/lib.rs
index bd5c586..b355af4 100644
--- a/crates/sdk/src/lib.rs
+++ b/crates/sdk/src/lib.rs
@@ -1 +1,8 @@
+pub use self::animation_layer::AnimationLayer;
+pub use self::animation_state::AnimationState;
+pub use self::pad::Pad;
 pub use sdk_primitives::*;
+
+mod animation_layer;
+mod animation_state;
+mod pad;
diff --git a/crates/sdk_primitives/src/matrix3x4.rs b/crates/sdk_primitives/src/matrix3x4.rs
index d7035cf..873f1bc 100644
--- a/crates/sdk_primitives/src/matrix3x4.rs
+++ b/crates/sdk_primitives/src/matrix3x4.rs
@@ -1,6 +1,4 @@
 use crate::vector::Vector;
-use core::ops::{Add, Mul, Sub};
-use vek::vec::repr_simd::{Vec2, Vec3, Vec4};
 
 #[derive(Clone, Copy, Debug)]
 #[repr(C)]
@@ -28,26 +26,3 @@ impl Matrix3x4 {
         )
     }
 }
-
-/*impl Mul<Self> for Matrix3x4 {
-    type Output = Self;
-
-    fn mul(self, rhs: Self) -> Self {
-        fn mul(a: [f32; 4], b: [f32; 4]) -> f32 {
-            (Vec4::new(a[0], a[1], a[2], a[3]) * Vec4::new(b[0], b[1], b[2], b[3])).sum()
-        }
-
-        let mut result = Self::zero();
-
-        for j in 0..4 {
-            for i in 0..4 {
-                result.0[j][i] = mul(
-                    [self.0[j][0], self.0[j][1], self.0[j][2], self.0[j][3]],
-                    [rhs.0[0][i], rhs.0[1][i], rhs.0[2][i], rhs.0[3][i]],
-                );
-            }
-        }
-
-        result
-    }
-}*/
diff --git a/src/animation_layer.rs b/src/animation_layer.rs
deleted file mode 100644
index ed24758..0000000
--- a/src/animation_layer.rs
+++ /dev/null
@@ -1,31 +0,0 @@
-use std::fmt;
-
-#[repr(C)]
-pub struct AnimationLayer {
-    _pad_0: [u8; 24],
-    pub order: i32,
-    pub sequence: i32,
-    pub previous_cycle: f32,
-    pub weight: f32,
-    pub weight_delta_rate: f32,
-    pub playback_rate: f32,
-    pub cycle: f32,
-    // pointer to the player
-    pub owner: *const (),
-    _pad_1: [u8; 8],
-}
-
-impl fmt::Debug for AnimationLayer {
-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
-        fmt.debug_struct("AnimationLayer")
-            .field("order", &self.order)
-            .field("sequence", &self.sequence)
-            .field("previous", &self.previous_cycle)
-            .field("weight", &self.weight)
-            .field("weight_delta_rate", &self.weight_delta_rate)
-            .field("playback_rate", &self.playback_rate)
-            .field("cycle", &self.cycle)
-            .field("owner", &self.owner)
-            .finish()
-    }
-}
diff --git a/src/animation_state.rs b/src/animation_state.rs
deleted file mode 100644
index b945486..0000000
--- a/src/animation_state.rs
+++ /dev/null
@@ -1,93 +0,0 @@
-use sdk::{Angle, Vector2D};
-
-#[derive(Debug)]
-#[repr(C)]
-pub struct AnimationState {
-    _pad_0008: [u8; 128],
-    pub last_animation_update_time: f32,
-    pub last_animation_update_frame: i32,
-    pub eye_pitch: f32,
-    pub yaw: f32,
-    pub pitch: f32,
-    pub goal_feet_yaw: f32,
-    pub current_feet_yaw: f32,
-    /// Movement direction on a compass.
-    ///
-    ///   North: `0`
-    ///   East: `90`
-    ///   South: `180`
-    ///   West: `270`
-    pub absolute_movement_direction: f32,
-    /// The value of `absolute_movement_direction` in the last tick.
-    pub last_absolute_movement_direction: f32,
-    pub lean_amount: f32,
-    _pad_00a8: [u8; 4],
-    /// Progress from `0.0` to `1.0` of the legs moving animation.
-    pub feet_cycle: f32,
-    /// How fast to play `feet_cycle`.
-    ///
-    /// Walking is slower. Running is faster.
-    pub feet_yaw_rate: f32,
-    _pad_00b4: [u8; 4],
-    /// Progress from `0.0` to `1.0` of the crouch and jump animations.
-    ///
-    /// For crouching:
-    ///
-    ///  Standing: `0.0`
-    ///  Crouched: `1.0`
-    ///
-    /// For jumping:
-    ///  
-    ///  Jumpped: `1.0`
-    ///  Standing: `0.0`
-    pub duck_progress: f32,
-    /// Adds some time when landing animation starts.
-    pub landing_animation_time_left_until_done: f32,
-    _pad_00c0: [u8; 4],
-    pub origin: Angle,
-    pub last_origin: Angle,
-    /// Velocity on each axis.
-    pub axis_velocity: Vector2D,
-    _pad_00e4: [u8; 4],
-    /// Both axis are `-1.0` to `1.0`.
-    ///
-    /// For `x`, west is `1.0`, east is `-1.0`.
-    /// For `y`, north is `-1.0`, south is `1.0`.
-    pub current_direction: Vector2D,
-    _pad_00f0: [u8; 4],
-    /// Same as `current_direction`. Saved until the next update,
-    pub last_known_direction: Vector2D,
-    _pad_00fc: [u8; 4],
-    /// Velocity on each plane.
-    ///
-    /// `x` is affected by slopes. (e.g. 240 with a knife on a hill).
-    /// `y` positive when moving up (e.g. jumping), negative when moving down (e.g. falling).
-    pub plane_velocity: Vector2D,
-    /// Speed normalized in terms of `0.0 to `1.0`.
-    ///
-    /// Full speed: `1.0`.
-    pub speed: f32,
-    /// `0.0` to `2.0` of the aprroximate feet shuffle speed.
-    pub feet_shuffle_speed: f32,
-    /// `0.0` to `2.0` of the aprroximate feet shuffle speed 2.
-    pub feet_shuffle_speed2: f32,
-    /// Jumping and crouching does not affect this.
-    pub time_since_started_moving: f32,
-    /// Jumping and crouching does not affect this.
-    pub time_since_stopped_moving: f32,
-    pub on_ground: bool,
-    /// `true` if performing a knee buckling animation.
-    pub in_jump_recovery: bool,
-    _pad_011e: [u8; 10],
-    /// Updated right before you jump.
-    pub height_before_jump: [u8; 10],
-    _pad_012c: [u8; 4],
-    /// Running progeess from `0.0` to `1.0`.
-    ///
-    /// Only affected by running.
-    /// Full speed: `1.0` (e.g. 250 velocity when running with knife).
-    pub running_accel_progress: f32,
-    _pad_0134: [u8; 68],
-    // Overall size should be 0x3B0(+4), padding the end here.
-    _unknown: [u8; 572],
-} // size: 0x0178
diff --git a/src/client.rs b/src/client.rs
index f73343e..087e025 100644
--- a/src/client.rs
+++ b/src/client.rs
@@ -1,4 +1,4 @@
-use crate::entity_id::EntityId;
+use crate::entity::EntityId;
 use core::fmt;
 use core::ptr::NonNull;
 use daisy_chain::Chain;
diff --git a/src/entities.rs b/src/entities.rs
deleted file mode 100644
index 0c395a3..0000000
--- a/src/entities.rs
+++ /dev/null
@@ -1,79 +0,0 @@
-use crate::entity::Entity;
-use crate::global::Global;
-use vptr::Virtual;
-
-#[derive(Debug)]
-pub struct Entities {
-    this: *const (),
-}
-
-impl Entities {
-    pub unsafe fn from_raw(ptr: *const ()) -> Self {
-        Self { this: ptr }
-    }
-
-    pub fn as_ptr(&self) -> *const () {
-        self.this
-    }
-
-    pub fn as_mut_ptr(&self) -> *mut () {
-        self.this as *mut ()
-    }
-
-    pub fn get(&self, index: i32) -> Option<Entity> {
-        type Signature = unsafe extern "C" fn(this: *const (), index: i32) -> *const ();
-
-        let method: Signature = unsafe { self.as_ptr().vget(3 * 8) };
-        let entity = unsafe { method(self.as_ptr(), index) };
-
-        if entity.is_null() {
-            None
-        } else {
-            Some(unsafe { Entity::from_raw(entity) })
-        }
-    }
-
-    pub fn iter(&self) -> Iter<'_> {
-        Iter::new(self)
-    }
-}
-
-pub struct Iter<'a> {
-    entities: &'a Entities,
-    index: i32,
-    len: i32,
-}
-
-impl<'a> Iter<'a> {
-    pub(crate) fn new(entities: &'a Entities) -> Self {
-        let len = Global::handle().globals().max_clients;
-
-        Self {
-            entities,
-            index: 0,
-            len,
-        }
-    }
-}
-
-impl<'a> Iterator for Iter<'a> {
-    type Item = Entity;
-
-    fn next(&mut self) -> Option<Entity> {
-        if self.index > self.len {
-            return None;
-        }
-
-        match self.entities.get(self.index) {
-            Some(entity) => {
-                self.index += 1;
-
-                Some(entity)
-            }
-            None => None,
-        }
-    }
-}
-
-unsafe impl Send for Entities {}
-unsafe impl Sync for Entities {}
diff --git a/src/entity.rs b/src/entity.rs
index 2a9ebed..abf117b 100644
--- a/src/entity.rs
+++ b/src/entity.rs
@@ -1,21 +1,49 @@
 use super::netvars::Netvar;
-use crate::animation_layer::AnimationLayer;
 use crate::global::Global;
 use crate::player_state::PlayerState;
-use sdk::{Angle, Vector};
+use core::ptr::NonNull;
+use sdk::{Angle, AnimationLayer, AnimationState, Vector};
 
-#[derive(Debug)]
-pub struct Entity {
-    pub this: *const (),
+pub use self::id::EntityId;
+pub use self::list::{EntityList, RawEntityList};
+
+mod id;
+mod list;
+
+extern "C" {
+    pub type RawEntity;
 }
 
+unsafe impl Send for RawEntity {}
+unsafe impl Sync for RawEntity {}
+
+#[derive(Debug)]
+//#[repr(transparent)]
+pub struct Entity(NonNull<RawEntity>);
+
 impl Entity {
-    pub const unsafe fn from_raw(ptr: *const ()) -> Self {
-        Self { this: ptr }
+    pub const fn from_raw(raw: *mut RawEntity) -> Option<Self> {
+        if raw.is_null() {
+            None
+        } else {
+            Some(unsafe { Self::from_raw_unchecked(raw) })
+        }
+    }
+
+    pub const unsafe fn from_raw_unchecked(raw: *mut RawEntity) -> Self {
+        Self(NonNull::new_unchecked(raw))
+    }
+
+    pub const fn as_ptr(&self) -> *const RawEntity {
+        self.0.as_ptr()
     }
 
-    pub fn as_ptr(&self) -> *const () {
-        self.this
+    pub const fn virtual_table(&self) -> *const *const u8 {
+        unsafe { *(self.as_ptr() as *const *const *const u8) }
+    }
+
+    pub unsafe fn get(&self, offset: usize) -> *const u8 {
+        (self.as_ptr() as *const u8).add(offset)
     }
 
     pub fn flags(&self) -> &PlayerState {
@@ -42,15 +70,36 @@ impl Entity {
 
     pub fn animation_layers(&self) -> &mut [AnimationLayer; 13] {
         unsafe {
-            &mut *((self.as_ptr() as *const u8).add(Global::handle().animation_layers() as usize)
-                as *mut [AnimationLayer; 13])
+            let animlayersptr =
+                self.get(Global::handle().animation_layers() as usize) as *mut [AnimationLayer; 13];
+
+            core::mem::transmute(animlayersptr)
+        }
+    }
+
+    pub fn animation_state(&self) -> Option<&mut AnimationState> {
+        unsafe {
+            let animstateptrptr =
+                self.get(Global::handle().animation_state() as usize) as *mut *mut AnimationState;
+
+            if animstateptrptr.is_null() {
+                return None;
+            }
+
+            let animstateptr = *animstateptrptr;
+
+            if animstateptr.is_null() {
+                return None;
+            }
+
+            core::mem::transmute(animstateptr)
         }
     }
 }
 
 impl Netvar for Entity {
     fn as_ptr(&self) -> *const () {
-        self.this
+        Entity::as_ptr(self) as _
     }
 }
 
diff --git a/src/entity_id.rs b/src/entity_id.rs
deleted file mode 100644
index 8473033..0000000
--- a/src/entity_id.rs
+++ /dev/null
@@ -1,288 +0,0 @@
-#[derive(Debug)]
-#[repr(i32)]
-pub enum EntityId {
-    CAIBaseNPC,
-    CAK47,
-    CBaseAnimating,
-    CBaseAnimatingOverlay,
-    CBaseAttributableItem,
-    CBaseButton,
-    CBaseCombatCharacter,
-    CBaseCombatWeapon,
-    CBaseCSGrenade,
-    CBaseCSGrenadeProjectile,
-    CBaseDoor,
-    CBaseEntity,
-    CBaseFlex,
-    CBaseGrenade,
-    CBaseParticleEntity,
-    CBasePlayer,
-    CBasePropDoor,
-    CBaseTeamObjectiveResource,
-    CBaseTempEntity,
-    CBaseToggle,
-    CBaseTrigger,
-    CBaseViewModel,
-    CBaseVPhysicsTrigger,
-    CBaseWeaponWorldModel,
-    CBeam,
-    CBeamSpotlight,
-    CBoneFollower,
-    CBRC4Target,
-    CBreachCharge,
-    CBreachChargeProjectile,
-    CBreakableProp,
-    CBreakableSurface,
-    CBumpMine,
-    CBumpMineProjectile,
-    CC4,
-    CCascadeLight,
-    CChicken,
-    CColorCorrection,
-    CColorCorrectionVolume,
-    CCSGameRulesProxy,
-    CCSPlayer,
-    CCSPlayerResource,
-    CCSRagdoll,
-    CCSTeam,
-    CDangerZone,
-    CDangerZoneController,
-    CDEagle,
-    CDecoyGrenade,
-    CDecoyProjectile,
-    CDrone,
-    CDronegun,
-    CDynamicLight,
-    CDynamicProp,
-    CEconEntity,
-    CEconWearable,
-    CEmbers,
-    CEntityDissolve,
-    CEntityFlame,
-    CEntityFreezing,
-    CEntityParticleTrail,
-    CEnvAmbientLight,
-    CEnvDetailController,
-    CEnvDOFController,
-    CEnvGasCanister,
-    CEnvParticleScript,
-    CEnvProjectedTexture,
-    CEnvQuadraticBeam,
-    CEnvScreenEffect,
-    CEnvScreenOverlay,
-    CEnvTonemapController,
-    CEnvWind,
-    CFEPlayerDecal,
-    CFireCrackerBlast,
-    CFireSmoke,
-    CFireTrail,
-    CFish,
-    CFists,
-    CFlashbang,
-    CFogController,
-    CFootstepControl,
-    CFuncDust,
-    CFuncLOD,
-    CFuncAreaPortalWindow,
-    CFuncBrush,
-    CFuncConveyor,
-    CFuncLadder,
-    CFuncMonitor,
-    CFuncMoveLinear,
-    CFuncOccluder,
-    CFuncReflectiveGlass,
-    CFuncRotating,
-    CFuncSmokeVolume,
-    CFuncTrackTrain,
-    CGameRulesProxy,
-    CGrassBurn,
-    CHandleTest,
-    CHEGrenade,
-    CHostage,
-    CHostageCarriableProp,
-    CIncendiaryGrenade,
-    CInferno,
-    CInfoLadderDismount,
-    CInfoMapRegion,
-    CInfoOverlayAccessor,
-    CItemHealthshot,
-    CItemCash,
-    CItemDogtags,
-    CKnife,
-    CKnifeGG,
-    CLightGlow,
-    CMapVetoPickController,
-    CMaterialModifyControl,
-    CMelee,
-    CMolotovGrenade,
-    CMolotovProjectile,
-    CMovieDisplay,
-    CParadropChopper,
-    CParticleFire,
-    CParticlePerformanceMonitor,
-    CParticleSystem,
-    CPhysBox,
-    CPhysBoxMultiplayer,
-    CPhysicsProp,
-    CPhysicsPropMultiplayer,
-    CPhysMagnet,
-    CPhysPropAmmoBox,
-    CPhysPropLootCrate,
-    CPhysPropRadarJammer,
-    CPhysPropWeaponUpgrade,
-    CPlantedC4,
-    CPlasma,
-    CPlayerPing,
-    CPlayerResource,
-    CPointCamera,
-    CPointCommentaryNode,
-    CPointWorldText,
-    CPoseController,
-    CPostProcessController,
-    CPrecipitation,
-    CPrecipitationBlocker,
-    CPredictedViewModel,
-    CPropHallucination,
-    CPropCounter,
-    CPropDoorRotating,
-    CPropJeep,
-    CPropVehicleDriveable,
-    CRagdollManager,
-    CRagdollProp,
-    CRagdollPropAttached,
-    CRopeKeyframe,
-    CSCAR17,
-    CSceneEntity,
-    CSensorGrenade,
-    CSensorGrenadeProjectile,
-    CShadowControl,
-    CSlideshowDisplay,
-    CSmokeGrenade,
-    CSmokeGrenadeProjectile,
-    CSmokeStack,
-    CSnowball,
-    CSnowballPile,
-    CSnowballProjectile,
-    CSpatialEntity,
-    CSpotlightEnd,
-    CSprite,
-    CSpriteOriented,
-    CSpriteTrail,
-    CStatueProp,
-    CSteamJet,
-    CSun,
-    CSunlightShadowControl,
-    CSurvivalSpawnChopper,
-    CTablet,
-    CTeam,
-    CTeamplayRoundBasedRulesProxy,
-    CTEArmorRicochet,
-    CTEBaseBeam,
-    CTEBeamEntPoint,
-    CTEBeamEnts,
-    CTEBeamFollow,
-    CTEBeamLaser,
-    CTEBeamPoints,
-    CTEBeamRing,
-    CTEBeamRingPoint,
-    CTEBeamSpline,
-    CTEBloodSprite,
-    CTEBloodStream,
-    CTEBreakModel,
-    CTEBSPDecal,
-    CTEBubbles,
-    CTEBubbleTrail,
-    CTEClientProjectile,
-    CTEDecal,
-    CTEDust,
-    CTEDynamicLight,
-    CTEEffectDispatch,
-    CTEEnergySplash,
-    CTEExplosion,
-    CTEFireBullets,
-    CTEFizz,
-    CTEFootprintDecal,
-    CTEFoundryHelpers,
-    CTEGaussExplosion,
-    CTEGlowSprite,
-    CTEImpact,
-    CTEKillPlayerAttachments,
-    CTELargeFunnel,
-    CTEMetalSparks,
-    CTEMuzzleFlash,
-    CTEParticleSystem,
-    CTEPhysicsProp,
-    CTEPlantBomb,
-    CTEPlayerAnimEvent,
-    CTEPlayerDecal,
-    CTEProjectedDecal,
-    CTERadioIcon,
-    CTEShatterSurface,
-    CTEShowLine,
-    CTesla,
-    CTESmoke,
-    CTESparks,
-    CTESprite,
-    CTESpriteSpray,
-    CTestProxyToggleNetworkable,
-    CTestTraceline,
-    CTEWorldDecal,
-    CTriggerPlayerMovement,
-    CTriggerSoundOperator,
-    CVGuiScreen,
-    CVoteController,
-    CWaterBullet,
-    CWaterLODControl,
-    CWeaponAug,
-    CWeaponAWP,
-    CWeaponBaseItem,
-    CWeaponBizon,
-    CWeaponCSBase,
-    CWeaponCSBaseGun,
-    CWeaponCycler,
-    CWeaponElite,
-    CWeaponFamas,
-    CWeaponFiveSeven,
-    CWeaponG3SG1,
-    CWeaponGalil,
-    CWeaponGalilAR,
-    CWeaponGlock,
-    CWeaponHKP2000,
-    CWeaponM249,
-    CWeaponM3,
-    CWeaponM4A1,
-    CWeaponMAC10,
-    CWeaponMag7,
-    CWeaponMP5Navy,
-    CWeaponMP7,
-    CWeaponMP9,
-    CWeaponNegev,
-    CWeaponNOVA,
-    CWeaponP228,
-    CWeaponP250,
-    CWeaponP90,
-    CWeaponSawedoff,
-    CWeaponSCAR20,
-    CWeaponScout,
-    CWeaponSG550,
-    CWeaponSG552,
-    CWeaponSG556,
-    CWeaponShield,
-    CWeaponSSG08,
-    CWeaponTaser,
-    CWeaponTec9,
-    CWeaponTMP,
-    CWeaponUMP45,
-    CWeaponUSP,
-    CWeaponXM1014,
-    CWeaponZoneRepulsor,
-    CWorld,
-    CWorldVguiText,
-    DustTrail,
-    MovieExplosion,
-    ParticleSmokeGrenade,
-    RocketTrail,
-    SmokeTrail,
-    SporeExplosion,
-    SporeTrail,
-}
diff --git a/src/global.rs b/src/global.rs
index 619eeec..06a07cc 100644
--- a/src/global.rs
+++ b/src/global.rs
@@ -2,8 +2,7 @@ use crate::command::Command;
 use crate::console::{Console, Var};
 use crate::consts::offset;
 use crate::engine::Engine;
-use crate::entities::Entities;
-use crate::entity::Entity;
+use crate::entity::{Entity, EntityList};
 use crate::frame::Frame;
 use crate::globals::Globals;
 use crate::hooks;
@@ -123,8 +122,8 @@ impl Global {
         &self.0.interfaces.engine
     }
 
-    pub fn entities(&self) -> &Entities {
-        &self.0.interfaces.entities
+    pub fn entity_list(&self) -> &EntityList {
+        &self.0.interfaces.entity_list
     }
 
     pub fn console(&self) -> &Console {
@@ -135,6 +134,10 @@ impl Global {
         self.0.interfaces.animation_layers
     }
 
+    pub fn animation_state(&self) -> u32 {
+        self.0.interfaces.animation_state
+    }
+
     pub fn cheats(&self) -> &Var<i32> {
         &self.0.interfaces.cheats
     }
diff --git a/src/hooks/create_move.rs b/src/hooks/create_move.rs
index 9b3ad80..e09b419 100644
--- a/src/hooks/create_move.rs
+++ b/src/hooks/create_move.rs
@@ -1,7 +1,6 @@
 use crate::command::Command;
 use crate::entity::Entity;
 use crate::global::Global;
-use crate::intrinsics;
 use crate::movement::Movement;
 
 pub type Signature =
@@ -24,7 +23,9 @@ pub unsafe extern "C" fn hook(
         return true;
     }
 
-    let send_packet = &mut *(*(intrinsics::frame_address(0) as *mut *mut bool)).sub(0x18);
+    let rbp: *mut *mut bool;
+    core::arch::asm!("mov {}, rbp", out(reg) rbp, options(nostack));
+    let send_packet = &mut *(*rbp).sub(24);
     let original_angle = command.view_angle;
     let original_forward = command.forward_move;
     let original_side = command.side_move;
diff --git a/src/hooks/frame_stage_notify.rs b/src/hooks/frame_stage_notify.rs
index 94f533a..09a3204 100644
--- a/src/hooks/frame_stage_notify.rs
+++ b/src/hooks/frame_stage_notify.rs
@@ -6,7 +6,7 @@ pub type Signature = unsafe extern "C" fn(this: *const (), frame: Frame);
 pub unsafe extern "C" fn hook(this: *const (), frame: Frame) {
     let global = Global::handle();
     let local_player_index = global.engine().local_player_index();
-    let local_player = global.entities().get(local_player_index);
+    let local_player = global.entity_list().get(local_player_index);
 
     if let Some(local_player) = local_player {
         *global.local_player_ptr() = Box::new(Some(local_player));
diff --git a/src/input.rs b/src/input.rs
index eb37fb8..3265698 100644
--- a/src/input.rs
+++ b/src/input.rs
@@ -1,5 +1,4 @@
-use sdk::{Vector, Vector2D};
-use std::fmt;
+use sdk::{Pad, Vector};
 
 pub use self::button::Button;
 pub use self::joystick::Joystick;
@@ -11,17 +10,14 @@ mod joystick;
 mod mouse;
 mod state;
 
+#[derive(Debug)]
 #[repr(C)]
 pub struct Input {
-    _pad0: [u8; 0xB4],
-    pub intercepting_mouse: bool,
+    _pad0: Pad<201>,
     pub thirdperson: bool,
-    pub moving_with_mouse: bool,
+    _pad1: Pad<1>,
     pub offset: Vector,
-    pub distance: Vector,
-    pub old_pos: Vector2D,
-    pub pos: Vector2D,
-    pub is_orthographic: bool,
+    _pad2: Pad<18>,
 }
 
 impl Input {
@@ -29,18 +25,3 @@ impl Input {
         &*(ptr as *const Self)
     }
 }
-
-impl fmt::Debug for Input {
-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
-        fmt.debug_struct("Input")
-            .field("intercepting_mouse", &self.intercepting_mouse)
-            .field("thirdperson", &self.thirdperson)
-            .field("moving_with_mouse", &self.moving_with_mouse)
-            .field("offset", &self.offset)
-            .field("distance", &self.distance)
-            .field("old_pos", &self.old_pos)
-            .field("pos", &self.pos)
-            .field("is_orthographic", &self.is_orthographic)
-            .finish()
-    }
-}
diff --git a/src/input/button.rs b/src/input/button.rs
index 7e879f1..c30bacd 100644
--- a/src/input/button.rs
+++ b/src/input/button.rs
@@ -1,6 +1,3 @@
-pub const MAX_SPLITSCREEN_CLIENT_BITS: u32 = 2;
-pub const MAX_SPLITSCREEN_CLIENTS: u32 = 4;
-
 #[derive(Clone, Copy, Debug)]
 #[repr(C)]
 pub struct Button(i32);
diff --git a/src/interfaces.rs b/src/interfaces.rs
index ef06058..ddd2753 100644
--- a/src/interfaces.rs
+++ b/src/interfaces.rs
@@ -2,10 +2,11 @@ use crate::client::Client;
 use crate::console::{Console, Var};
 use crate::consts::interface;
 use crate::engine::Engine;
-use crate::entities::Entities;
+use crate::entity::EntityList;
 use crate::globals::Globals;
 use crate::input::Input;
 use crate::libraries::Libraries;
+use crate::pattern;
 use crate::trace::EngineTrace;
 use core::mem;
 use vptr::{Pointer, VirtualMut};
@@ -19,7 +20,7 @@ pub struct Interfaces {
     pub globals: &'static Globals,
     pub input: &'static Input,
     pub panel: *mut (),
-    pub entities: Entities,
+    pub entity_list: EntityList,
     pub engine_vgui: *mut (),
     pub model: *mut (),
     pub model_info: *mut (),
@@ -33,6 +34,9 @@ pub struct Interfaces {
     /// offset for animation layers
     pub animation_layers: u32,
 
+    /// offset for animation state
+    pub animation_state: u32,
+
     /// enable variables locked behing cheats (`sv_cheats`)
     pub cheats: Var<i32>,
 
@@ -85,9 +89,9 @@ impl Interfaces {
 
         let panel = libraries.vgui2.get_interface(interface::VENGINEVGUI);
 
-        let entities = unsafe {
-            Entities::from_raw(libraries.client.get_interface(interface::VCLIENTENTITYLIST))
-        };
+        let entity_list =
+            EntityList::from_raw(libraries.client.get_interface(interface::VCLIENTENTITYLIST) as _)
+                .unwrap();
 
         let engine_vgui = libraries.engine.get_interface(interface::VENGINEVGUI);
 
@@ -142,16 +146,18 @@ impl Interfaces {
             &*input
         };
 
-        let patterns = crate::pattern::Libraries::new();
-        let patterns = patterns.0.read();
-        let (base, client_client) = patterns.get("client_client.so").unwrap();
-        let client_client: &[u8] = &**client_client;
-        let animation_layers = crate::pattern::ANIMATION_LAYERS
-            .find(client_client)
-            .unwrap();
+        let patterns = pattern::Libraries::new();
         let animation_layers = unsafe {
-            *(((base + animation_layers.start()) as *const usize as *const u8).add(35)
-                as *const u32)
+            *(patterns
+                .address_of("client_client.so", &pattern::ANIMATION_LAYERS)
+                .unwrap()
+                .add(35) as *const u32)
+        };
+        let animation_state = unsafe {
+            *(patterns
+                .address_of("client_client.so", &pattern::ANIMATION_STATE)
+                .unwrap()
+                .add(52) as *const u32)
         };
 
         let cheats = console.var("sv_cheats").unwrap();
@@ -174,7 +180,7 @@ impl Interfaces {
             globals,
             input,
             panel,
-            entities,
+            entity_list,
             engine_vgui,
             model,
             model_info,
@@ -186,6 +192,7 @@ impl Interfaces {
             events,
 
             animation_layers,
+            animation_state,
 
             cheats,
             ffa,
diff --git a/src/intrinsics.rs b/src/intrinsics.rs
deleted file mode 100644
index 9348721..0000000
--- a/src/intrinsics.rs
+++ /dev/null
@@ -1,4 +0,0 @@
-extern "C" {
-    #[link_name = "llvm.frameaddress"]
-    pub fn frame_address(depth: i32) -> *const i8;
-}
diff --git a/src/lib.rs b/src/lib.rs
index 2638e2a..76ada47 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,15 +1,15 @@
-#![feature(const_trait_impl)]
-#![feature(const_fn_fn_ptr_basics)]
-#![feature(once_cell)]
 #![feature(const_fn_floating_point_arithmetic)]
-#![feature(link_llvm_intrinsics)]
+#![feature(const_fn_fn_ptr_basics)]
 #![feature(const_mut_refs)]
+#![feature(const_trait_impl)]
+#![feature(const_ptr_is_null)]
+#![feature(once_cell)]
+#![feature(extern_types)]
+#![feature(ptr_metadata)]
 #![feature(trait_alias)]
 
 use crate::global::Global;
-use crate::log::Logger;
 use atomic_float::AtomicF32;
-use rand::{thread_rng, Rng};
 use std::sync::atomic::{AtomicBool, Ordering};
 use std::sync::Arc;
 use std::thread;
@@ -18,16 +18,12 @@ use std::time::Duration;
 pub type Error = Box<dyn std::error::Error + Send + Sync + 'static>;
 pub type Result<T, E = Error> = std::result::Result<T, E>;
 
-pub mod animation_layer;
-pub mod animation_state;
 pub mod client;
 pub mod command;
 pub mod console;
 pub mod consts;
 pub mod engine;
-pub mod entities;
 pub mod entity;
-pub mod entity_id;
 pub mod error;
 pub mod frame;
 pub mod global;
@@ -36,20 +32,19 @@ pub mod hit_group;
 pub mod hooks;
 pub mod input;
 pub mod interfaces;
-pub mod intrinsics;
 pub mod item_kind;
 pub mod libraries;
 pub mod library;
-pub mod log;
 pub mod move_kind;
 pub mod movement;
 pub mod netvars;
+pub mod pad;
 pub mod pattern;
 pub mod player_state;
 pub mod skybox;
 pub mod trace;
 
-fn main(_logger: Logger) -> Result<()> {
+fn main() -> Result<()> {
     if library::Library::serverbrowser().is_err() {
         println!("waiting for csgo to load");
 
@@ -68,18 +63,20 @@ fn main(_logger: Logger) -> Result<()> {
     let lby_updated = Arc::new(AtomicBool::new(false));
 
     global.on_frame(move |_frame| {
-        if let Some(local_player) = global2.local_player() {
+        println!("{:?}", global2.input());
+
+        if let Some(_local_player) = global2.local_player() {
             // thirdperson fix
             if global2.input().thirdperson {
-                local_player.view_angle().pitch = 89.0;
-                local_player.view_angle().yaw = yaw.load(Ordering::SeqCst);
+                /*local_player.view_angle().pitch = 89.0;
+                local_player.view_angle().yaw = yaw.load(Ordering::SeqCst);*/
             }
 
-            for player in global2.entities().iter() {
+            /*for player in global2.entities().iter() {
                 let mut animation_layers = player.animation_layers();
 
                 animation_layers[12].weight = 0.0;
-            }
+            }*/
         }
 
         global2.cheats().set(1);
@@ -91,8 +88,6 @@ fn main(_logger: Logger) -> Result<()> {
     });
 
     global.on_move(move |mut movement| {
-        //movement.send_packet = movement.tick_count % 14 == 0;
-
         if !movement.local_player.flags().on_ground() {
             movement.in_jump = false;
         }
@@ -122,24 +117,33 @@ fn main(_logger: Logger) -> Result<()> {
                 movement.view_angle.yaw = client_yaw - 58.0;
                 movement.send_packet = false;
 
-                println!("lby  yaw = {:?}", movement.view_angle.yaw);
+                //println!("lby  yaw = {:?}", movement.view_angle.yaw);
             } else if movement.send_packet {
                 movement.view_angle.yaw = client_yaw;
 
-                println!("real yaw = {:?}", movement.view_angle.yaw);
+                //println!("real yaw = {:?}", movement.view_angle.yaw);
             } else {
                 movement.view_angle.yaw = client_yaw + 120.0;
 
-                println!("fake yaw = {:?}", movement.view_angle.yaw);
+                //println!("fake yaw = {:?}", movement.view_angle.yaw);
             }
 
             movement.view_angle.pitch = 89.0;
         }
 
-        if movement.send_packet {
+        if !movement.send_packet {
             yaw2.store(movement.view_angle.yaw, Ordering::SeqCst);
         }
 
+        //println!("tick_count = {}", movement.tick_count);
+
+        if movement.tick_count % 14 == 0 {
+            movement.send_packet = true;
+            movement.tick_count = i32::MAX;
+        } else {
+            movement.send_packet = false;
+        }
+
         movement
     });
 
@@ -147,23 +151,8 @@ fn main(_logger: Logger) -> Result<()> {
 }
 
 #[ctor::ctor]
-fn providence_init() {
-    thread::Builder::new()
-        .name(env!("CARGO_PKG_NAME").to_string())
-        .spawn(move || {
-            let logger = Logger::new();
-            let (non_blocking, _guard) = tracing_appender::non_blocking(logger.clone());
-            let subscriber = tracing_subscriber::fmt()
-                .with_ansi(false)
-                .with_level(false)
-                .with_max_level(tracing::Level::TRACE)
-                .with_writer(non_blocking)
-                .without_time();
-
-            tracing::subscriber::with_default(subscriber.finish(), || {
-                tracing::info!("And... we're in!");
-                tracing::info!("Main returned: {:?}", main(logger));
-            });
-        })
-        .unwrap();
+fn load() {
+    let _ = thread::Builder::new().spawn(move || {
+        let _ = main();
+    });
 }
diff --git a/src/libraries.rs b/src/libraries.rs
index bc75999..3e12411 100644
--- a/src/libraries.rs
+++ b/src/libraries.rs
@@ -10,23 +10,34 @@ pub struct Libraries {
     pub inputsystem: Library,
     pub vphysics: Library,
     pub localize: Library,
-    pub panorama: Library,
+    //pub panorama: Library,
     pub fs_stdio: Library,
     pub matchmaking: Library,
 }
 
 impl Libraries {
     pub fn new() -> Result<Self> {
+        println!("loading client");
         let client = Library::client()?;
+        println!("loading engine");
         let engine = Library::engine()?;
+        println!("loading materialsystem");
         let materialsystem = Library::materialsystem()?;
+        println!("loading vguimatsurface");
         let vguimatsurface = Library::vguimatsurface()?;
+        println!("loading vgui2");
         let vgui2 = Library::vgui2()?;
+        println!("loading inputsystem");
         let inputsystem = Library::inputsystem()?;
+        println!("loading vphysics");
         let vphysics = Library::vphysics()?;
+        println!("loading localize");
         let localize = Library::localize()?;
-        let panorama = Library::panorama()?;
+        println!("loading panorama");
+        //let panorama = Library::panorama()?;
+        println!("loading fs stdio");
         let fs_stdio = Library::fs_stdio()?;
+        println!("loading matchmaking");
         let matchmaking = Library::matchmaking()?;
 
         Ok(Self {
@@ -38,7 +49,7 @@ impl Libraries {
             inputsystem,
             vphysics,
             localize,
-            panorama,
+            //panorama,
             fs_stdio,
             matchmaking,
         })
diff --git a/src/library.rs b/src/library.rs
index b7bec81..a46ca47 100644
--- a/src/library.rs
+++ b/src/library.rs
@@ -70,8 +70,6 @@ impl<'a> Interfaces<'a> {
             {
                 let new = interface.new();
 
-                tracing::info!("{} ({}) -> {:?}", &name, &interface_name, new);
-
                 return new;
             }
         }
@@ -86,8 +84,6 @@ impl<'a> Interfaces<'a> {
             if interface_name == name {
                 let new = interface.new();
 
-                tracing::info!("{} ({}) -> {:?}", &name, interface_name, new);
-
                 return new;
             }
         }
@@ -128,8 +124,6 @@ impl Library {
             unix::Library::open(Some(&name), RTLD_NOLOAD | RTLD_NOW | RTLD_LOCAL)?.into_raw()
         };
 
-        tracing::debug!("{} -> {:?}", &name, ptr);
-
         let lib = unsafe { unix::Library::from_raw(ptr) };
 
         Ok(Library { lib })
diff --git a/src/log.rs b/src/log.rs
deleted file mode 100644
index 0c6c3bb..0000000
--- a/src/log.rs
+++ /dev/null
@@ -1,62 +0,0 @@
-use crate::console::Console;
-use parking_lot::{RwLock, RwLockWriteGuard};
-use std::fs::{File, OpenOptions};
-use std::io;
-use std::io::Write;
-use std::sync::Arc;
-
-struct LoggerRef {
-    file: File,
-    console: Option<Console>,
-}
-
-#[derive(Clone)]
-pub struct Logger(Arc<RwLock<LoggerRef>>);
-
-impl Logger {
-    pub fn new() -> Self {
-        let file = OpenOptions::new()
-            .append(true)
-            .create(true)
-            .read(true)
-            .write(true)
-            .open(concat!(env!("CARGO_MANIFEST_DIR"), "/log"))
-            .unwrap();
-
-        Self(Arc::new(RwLock::new(LoggerRef {
-            file,
-            console: None,
-        })))
-    }
-
-    pub fn set_console(&self, console: Console) {
-        self.lock().console = Some(console);
-    }
-
-    fn lock(&self) -> RwLockWriteGuard<'_, LoggerRef> {
-        self.0.write()
-    }
-
-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
-        let mut lock = self.lock();
-        let written = lock.file.write(buf)?;
-
-        if let Some(ref console) = lock.console {
-            console.write(buf);
-        }
-
-        lock.file.flush()?;
-
-        Ok(written)
-    }
-}
-
-impl Write for Logger {
-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
-        self.write(buf)
-    }
-
-    fn flush(&mut self) -> io::Result<()> {
-        Ok(())
-    }
-}
diff --git a/src/netvars.rs b/src/netvars.rs
index 5664c61..226762d 100644
--- a/src/netvars.rs
+++ b/src/netvars.rs
@@ -139,8 +139,6 @@ pub fn iterate_table(props: &'static RecvTable, table: &'static str, offset: isi
 }
 
 pub fn set(client: &Client) {
-    tracing::info!("Intialising netvars...");
-
     let all = client.get_all_classes();
 
     for class in all.iter() {
@@ -148,8 +146,6 @@ pub fn set(client: &Client) {
             iterate_table(table, table.name(), 0);
         }
     }
-
-    tracing::info!("{:#?}", NETVARS);
 }
 
 pub unsafe fn offset<T>(ptr: *const (), table: &str, prop: &str) -> *const T {
diff --git a/src/pattern.rs b/src/pattern.rs
index 34511e6..ef4fc92 100644
--- a/src/pattern.rs
+++ b/src/pattern.rs
@@ -1,206 +1,201 @@
+use core::ptr;
 use findshlibs::{Segment, SharedLibrary, TargetSharedLibrary};
-use parking_lot::RwLock;
+use parking_lot::{RwLock, RwLockReadGuard, RwLockWriteGuard};
 use regex::bytes::Regex;
 use std::collections::HashMap;
 use std::lazy::SyncLazy;
-use std::mem::ManuallyDrop;
 use std::path::Path;
-use std::slice;
 use std::sync::Arc;
 
+pub type Pattern = SyncLazy<Regex>;
+
 macro_rules! pattern {
     ($pattern:expr) => {
-        SyncLazy::new(move || Regex::new($pattern).unwrap())
+        SyncLazy::new(move || Regex::new(concat!("(?msx-u)", $pattern)).unwrap())
     };
 }
 
-// tbh forgot x86s encoding is variable in len so the disasm is likely wrong in places
-// esp after the ??'s
-
-// 55        push rbp
-// 48 89 e5  mov  rbp, rsp
-// 41 55     push r13
-// 49 89 fd  mov  r13, rdi
-// 41 54     push r12
-// bf
-pub const SEND_CLANTAG: SyncLazy<Regex> =
-    pattern!(r"(?msx-u)\x55\x48\x89\xe5\x41\x55\x49\x89\xfd\x41\x54\xbf");
-
-// 55           push rbp
-// 48 89 f7     mov  rdi, rsi
-// 48 8d 35
-// ?? ?? ?? ??
-// 48 89 e5     mov  rbp, rsp
-// ?? ?? ?? ??
-// 85 c0        test eax, eax
-pub const SET_PLAYER_READY: SyncLazy<Regex> =
-    pattern!(r"(?msx-u)\x55\x48\x89\xf7\x48\x8d\x35....\x48\x89\xe5\xe8....\x85\xc0");
-
-// 84 c0  test al, al
-// 74 50  je   0x54
-// xor    esi, esi
-pub const RADAR_IS_HLTV_CHECK: SyncLazy<Regex> = pattern!(r"(?msx-u)\x84\xc0\x74\x50\x31\xf6");
-
-// 81 27 00 00 00 ff  and  dword ptr [rdi], 0xff000000
-// 55                 push rbp
-// 31 c0              xor  eax, eax
-// 48 89 45           mov  rbp, rsp
-// 5d                 pop  rbp
-pub const INIT_KEY_VALUES: SyncLazy<Regex> =
-    pattern!(r"(?msx-u)\x81\x27\x00\x00\x00\xff\x55\x31\xc0\x48\x89\xe5\x5d");
-
-// 55           push rbp
-// 48 89 e5     mov  rbp, rsp
-// 41 57        push r15
-// 41 56        push r14
-// 41 55        push r13
-// 41 54        push r12
-// 49 89 d4     mov  r12, rdx
-// 53           push rbx
-// 48 81 ec
-// ?? ?? ?? ??
-// 48 85
-pub const LOAD_FROM_BUFFER: SyncLazy<Regex> = pattern!(
-    r"(?msx-u)\x55\x48\x89\xe5\x41\x57\x41\x56\x41\x55\x41\x54\x49\x89\xd4\x53\x48\x81\xec....\x48\x85"
-);
+pub const ITEM_SYSTEM: Pattern = pattern!(r"\xe8....\x4d\x63\xec");
 
-// 55           push rbp
-// 4c 8d 05
-// ?? ?? ?? ??
-// 48 89 e5     mov rbp, rsp
-// 41
-pub const SET_NAMED_SKYBOX: SyncLazy<Regex> =
-    pattern!(r"(?msx-u)\x55\x4c\x8d\x05....\x48\x89\xe5\x41");
-
-// 55              push rbp
-// 48 89 e5        mov  rbp, rsp
-// 41 56           push r14
-// 41 55           push r13
-// 41 54           push r12
-// 53              push rbx
-// 48 83 ec 30     sub  rsp, 0x30
-// 66 0f d6 45 d0  movq qword ptr [rbp - 0x30], xmm0
-pub const LINE_GOES_THROUGH_SMOKE: SyncLazy<Regex> = pattern!(
-    r"(?msx-u)\x55\x48\x89\xe5\x41\x56\x41\x55\x41\x54\x53\x48\x83\xec\x30\x66\x0f\xd6\x45\xd0"
-);
+pub const WEAPON_SYSTEM: Pattern = pattern!(r"\x48\x8b\x58\x10\x48\x8b\x07\xff\x10");
+
+pub const SEND_CLANTAG: Pattern = pattern!(r"\x55\x48\x89\xe5\x41\x55\x49\x89\xfd\x41\x54\xbf");
+
+pub const SET_PLAYER_READY: Pattern =
+    pattern!(r"\x55\x48\x89\xf7\x48\x8d\x35....\x48\x89\xe5\xe8....\x85\xc0");
+
+pub const RADAR_IS_HLTV_CHECK: Pattern = pattern!(r"\x84\xc0\x74\x50\x31\xf6");
+
+pub const INIT_KEY_VALUES: Pattern =
+    pattern!(r"\x81\x27\x00\x00\x00\xff\x55\x31\xc0\x48\x89\xe5\x5d");
 
-// 48 8b 0d
-// ?? ?? ??
-pub const MOVE_DATA: SyncLazy<Regex> = pattern!(r"(?msx-u)\x48\x8b\x0d....\x4c\x89\xea");
-
-pub const MOVE_HELPER: SyncLazy<Regex> = pattern!(r"(?msx-u)\x00\x48\x89\x3d....\xc3");
-
-pub const PREDICTION_SEED: SyncLazy<Regex> =
-    pattern!(r"(?msx-u)\x48\x8b\x05....\x8b\x38\xe8....\x89\xc7");
-
-// 55         push rbp
-// 48 89 e5   mov  rbp, rsp
-// 41 56      push r14
-// 41 55      push r13
-// 41 89 f5   mov  r13d, esi
-// 41 54      push r12
-// 53         push rbx
-// 48 98 fb   mov  rbx, rdi
-// 8b
-pub const ANIMATION_LAYERS: SyncLazy<Regex> =
-    pattern!(r"(?msx-u)\x55\x48\x89\xe5\x41\x56\x41\x55\x41\x89\xf5\x41\x54\x53\x48\x89\xfb\x8b");
-
-// 55          push rbp,
-// 48 89 e5    mov  rbp, rsp
-// 53          push rbx
-// 48 89 fb    mov  rbx, rdi
-// 48 83 ec 28 sub  rsp, 0x28
-// 48 8b 05
-// ?? ?? ?? ??
-// 48 8b 0d
-pub const ANIMATION_STATE: SyncLazy<Regex> = pattern!(
-    r"(?msx-u)\x55\x48\x89\xe5\x53\x48\x89\xfb\x48\x83\xec\x28\x48\x8b\x05....\x48\x8b\x00"
+pub const LOAD_FROM_BUFFER: Pattern = pattern!(
+    r"\x55\x48\x89\xe5\x41\x57\x41\x56\x41\x55\x41\x54\x49\x89\xd4\x53\x48\x81\xec....\x48\x85"
 );
 
-// 55        push   rbp
-// 48 89 e5  mov    rbp, rsp
-// 41 57     push   r15
-// 41 89 cf  mov    r15d, ecx
-// 41 56     push   r14
-// 41 55     push   r13
-// 41 89 d5  mov    r13d, edx
-// 41 54     push   r12
-// 53        push   rbx
-// 48 89 fb  mov    rbx, rdi
-// 48 81 ec
-pub const SAVE_DATA: SyncLazy<Regex> = pattern!(
-    r"(?msx-u)\x55\x48\x89\xe5\x41\x57\x41\x89\xcf\x41\x56\x41\x55\x41\x89\xd5\x41\x54\x53\x48\x89\xfb\x48\x81\xec"
+pub const SET_NAMED_SKYBOX: Pattern = pattern!(r"\x55\x4c\x8d\x05....\x48\x89\xe5\x41");
+
+pub const LINE_GOES_THROUGH_SMOKE: Pattern =
+    pattern!(r"\x55\x48\x89\xe5\x41\x56\x41\x55\x41\x54\x53\x48\x83\xec\x30\x66\x0f\xd6\x45\xd0");
+
+pub const MOVE_DATA: Pattern = pattern!(r"\x48\x8b\x0d....\x4c\x89\xea");
+
+pub const MOVE_HELPER: Pattern = pattern!(r"\x00\x48\x89\x3d....\xc3");
+
+pub const PREDICTION_SEED: Pattern = pattern!(r"\x48\x8b\x05....\x8b\x38\xe8....\x89\xc7");
+
+pub const ANIMATION_LAYERS: Pattern =
+    pattern!(r"\x55\x48\x89\xe5\x41\x56\x41\x55\x41\x89\xf5\x41\x54\x53\x48\x89\xfb\x8b");
+
+pub const ANIMATION_STATE: Pattern =
+    pattern!(r"\x55\x48\x89\xe5\x53\x48\x89\xfb\x48\x83\xec\x28\x48\x8b\x05....\x48\x8b\x00");
+
+pub const SAVE_DATA: Pattern = pattern!(
+    r"\x55\x48\x89\xe5\x41\x57\x41\x89\xcf\x41\x56\x41\x55\x41\x89\xd5\x41\x54\x53\x48\x89\xfb\x48\x81\xec"
 );
 
-// x9
-// ?? ?? ?? ??
-// 90           nop
-// 55           push   rbp
-// 48 63 f6     movsxd rsi, esi
-pub const RESTORE_DATA: SyncLazy<Regex> = pattern!(r"\xe9....\x90\x55\x48\x63\xf6");
-
-// 55           push rbp
-// be
-// ?? ?? ?? ??
-// 48 89 e5     mov  rbp, rsp
-// 41 54        push r12
-// 53           push rbx
-// 48 89 fb     mov  rbx, rdi
-// e8
-pub const ON_POST_RESTORE_DATA: SyncLazy<Regex> =
-    pattern!(r"(?msx-u)\x55\xbe....\x48\x89\xe5\x41\x54\x53\x48\x89\xfb\xe8");
-
-// 55           push rbp
-// 48 89 e5     mov  rbp, rsp
-// 41 57        push r15
-// 41 89 d7     mov  r15d, edx
-// 41 56        push r14
-// 41 55        push r13
-// 41 89 f5     mov  r13d, esi
-// 41 54        push r12
-// 53           push rbx
-// 48 83 ec 18  sub  rsp, 0x18
-pub const RESTORE_ENTITY_TO_PREDICTED_FRAME: SyncLazy<Regex> = pattern!(
-    r"(?msx-u)\x55\x48\x89\xe5\x41\x57\x41\x89\xd7\x41\x56\x41\x55\x41\x89\xf5\x41\x54\x53\x48\x83\xec\x18"
+pub const RESTORE_DATA: Pattern = pattern!(r"\xe9....\x90\x55\x48\x63\xf6");
+
+pub const ON_POST_RESTORE_DATA: Pattern =
+    pattern!(r"\x55\xbe....\x48\x89\xe5\x41\x54\x53\x48\x89\xfb\xe8");
+
+pub const RESTORE_ENTITY_TO_PREDICTED_FRAME: Pattern = pattern!(
+    r"\x55\x48\x89\xe5\x41\x57\x41\x89\xd7\x41\x56\x41\x55\x41\x89\xf5\x41\x54\x53\x48\x83\xec\x18"
 );
 
-#[derive(Debug)]
-pub struct Libraries(pub Arc<RwLock<HashMap<Box<str>, (usize, ManuallyDrop<Box<[u8]>>)>>>);
+/// non-owning range over some memory
+#[derive(Clone, Copy, Debug)]
+pub struct Range {
+    base_address: *const u8,
+    len: usize,
+}
 
-impl Libraries {
+impl Range {
+    pub const fn new(base_address: *const u8, len: usize) -> Self {
+        Self { base_address, len }
+    }
+
+    pub const unsafe fn as_slice(&self) -> &[u8] {
+        &*ptr::from_raw_parts(self.base_address as *const (), self.len)
+    }
+
+    pub unsafe fn offset_of(&self, pattern: &Pattern) -> Option<usize> {
+        match pattern.find(self.as_slice()) {
+            Some(r#match) => Some(r#match.start()),
+            None => None,
+        }
+    }
+
+    pub unsafe fn address_of(&self, pattern: &Pattern) -> Option<*const u8> {
+        match self.offset_of(pattern) {
+            Some(offset) => Some(self.base_address.add(offset)),
+            None => None,
+        }
+    }
+}
+
+pub struct Ranges {
+    ranges: HashMap<Box<str>, Range>,
+}
+
+impl Ranges {
     pub fn new() -> Self {
-        let libs = Arc::new(RwLock::new(HashMap::new()));
-        let libs2 = libs.clone();
+        Self {
+            ranges: HashMap::new(),
+        }
+    }
+
+    pub fn insert(&mut self, library_name: &str, base_address: *const u8, len: usize) {
+        let range = Range::new(base_address, len);
 
-        TargetSharedLibrary::each(move |lib| {
-            if let Some(phdr) = lib.segments().next() {
-                let name = lib.name().to_string_lossy();
+        self.ranges.insert(library_name.into(), range);
+    }
+
+    pub fn get(&self, library_name: &str) -> Option<Range> {
+        match self.ranges.get(library_name) {
+            Some(range) => Some(*range),
+            None => None,
+        }
+    }
 
-                if !name.contains("Counter-Strike Global Offensive") {
-                    return;
-                }
+    pub unsafe fn offset_of(&self, library_name: &str, pattern: &Pattern) -> Option<usize> {
+        match self.get(library_name) {
+            Some(range) => range.offset_of(pattern),
+            None => None,
+        }
+    }
 
-                let name = Path::new(name.as_ref());
-                let name = match name.file_name() {
-                    Some(file_name) => file_name,
-                    None => return,
-                };
+    pub unsafe fn address_of(&self, library_name: &str, pattern: &Pattern) -> Option<*const u8> {
+        match self.get(library_name) {
+            Some(range) => range.address_of(pattern),
+            None => None,
+        }
+    }
+}
 
-                let name = name.to_string_lossy().into_owned().into_boxed_str();
+#[derive(Clone)]
+pub struct Libraries(pub Arc<RwLock<Ranges>>);
 
-                let address = lib.virtual_memory_bias().0 + phdr.stated_virtual_memory_address().0;
-                let len = phdr.len();
+impl Libraries {
+    pub fn new() -> Self {
+        let this = Self(Arc::new(RwLock::new(Ranges::new())));
+        let this2 = this.clone();
 
-                println!("{} {} {}", &name, &address, &len);
+        TargetSharedLibrary::each(move |library| {
+            // skip libraries without a program header
+            let program_header = match library.segments().next() {
+                Some(program_header) => program_header,
+                None => return,
+            };
 
-                let slice =
-                    unsafe { slice::from_raw_parts(address as *const usize as *const u8, len) };
-                let slice = ManuallyDrop::new(Box::<[u8]>::from(slice));
+            let library_name = library.name().to_string_lossy();
 
-                libs2.write().insert(name, (address, slice));
+            // skip libraries that dont belong to csgo
+            if !library_name.contains("Counter-Strike Global Offensive") {
+                return;
             }
+
+            // were only interested in the library names themselves
+            let library_name = Path::new(library_name.as_ref());
+            let library_name = match library_name.file_name() {
+                Some(library_name) => library_name,
+                None => return,
+            };
+
+            let library_name = library_name.to_string_lossy().into_owned().into_boxed_str();
+
+            // library's base address and length
+            let base_address =
+                library.virtual_memory_bias().0 + program_header.stated_virtual_memory_address().0;
+            let len = program_header.len();
+
+            this2.insert(&library_name, base_address as *const u8, len);
         });
 
-        Self(libs)
+        this
+    }
+
+    fn read(&self) -> RwLockReadGuard<'_, Ranges> {
+        self.0.read()
+    }
+
+    fn write(&self) -> RwLockWriteGuard<'_, Ranges> {
+        self.0.write()
+    }
+
+    fn insert(&self, library_name: &str, base_address: *const u8, len: usize) {
+        self.write().insert(library_name, base_address, len);
+    }
+
+    /*fn get(&self, library_name: &str) -> Option<Range> {
+        self.read().get(library_name)
+    }*/
+
+    pub unsafe fn offset_of(&self, library_name: &str, pattern: &Pattern) -> Option<usize> {
+        self.read().offset_of(library_name, pattern)
+    }
+
+    pub unsafe fn address_of(&self, library_name: &str, pattern: &Pattern) -> Option<*const u8> {
+        self.read().address_of(library_name, pattern)
     }
 }
